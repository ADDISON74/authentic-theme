(function(b){if(typeof exports=="object"&&typeof module=="object"){b(require("../../lib/codemirror"))}else{if(typeof define=="function"&&define.amd){define(["../../lib/codemirror"],b)}else{b(CodeMirror)}}})(function(b){b.defineMode("haskell",function(y,a){function x(d,c,e){c(e);return e(d,c)}var E=/[a-z_]/;var t=/[A-Z]/;var w=/\d/;var F=/[0-9A-Fa-f]/;var s=/[0-7]/;var u=/[a-z_A-Z0-9'\xa1-\uffff]/;var v=/[-!#$%&*+.\/<=>?@\\^|~:]/;var D=/[(),;[\]`{}]/;var B=/[ \t\v\f]/;function A(d,c){if(d.eatWhile(B)){return null}var e=d.next();if(D.test(e)){if(e=="{"&&d.eat("-")){var f="comment";if(d.eat("#")){f="meta"}return x(d,c,z(f,1))}return null}if(e=="'"){if(d.eat("\\")){d.next()}else{d.next()}if(d.eat("'")){return"string"}return"string error"}if(e=='"'){return x(d,c,C)}if(t.test(e)){d.eatWhile(u);if(d.eat(".")){return"qualifier"}return"variable-2"}if(E.test(e)){d.eatWhile(u);return"variable"}if(w.test(e)){if(e=="0"){if(d.eat(/[xX]/)){d.eatWhile(F);return"integer"}if(d.eat(/[oO]/)){d.eatWhile(s);return"number"}}d.eatWhile(w);var f="number";if(d.match(/^\.\d+/)){f="number"}if(d.eat(/[eE]/)){f="number";d.eat(/[-+]/);d.eatWhile(w)}return f}if(e=="."&&d.eat(".")){return"keyword"}if(v.test(e)){if(e=="-"&&d.eat(/-/)){d.eatWhile(/-/);if(!d.eat(v)){d.skipToEnd();return"comment"}}var f="variable";if(e==":"){f="variable-2"}d.eatWhile(v);return f}return"error"}function z(d,c){if(c==0){return A}return function(f,e){var h=c;while(!f.eol()){var g=f.next();if(g=="{"&&f.eat("-")){++h}else{if(g=="-"&&f.eat("}")){--h;if(h==0){e(A);return d}}}}e(z(d,h));return d}}function C(d,c){while(!d.eol()){var e=d.next();if(e=='"'){c(A);return"string"}if(e=="\\"){if(d.eol()||d.eat(B)){c(G);return"string"}if(d.eat("&")){}else{d.next()}}}c(A);return"string error"}function G(d,c){if(d.eat("\\")){return x(d,c,C)}d.next();c(A);return"error"}var H=(function(){var f={};function c(g){return function(){for(var h=0;h<arguments.length;h++){f[arguments[h]]=g}}}c("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_");c("keyword")("..",":","::","=","\\","<-","->","@","~","=>");c("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**");c("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True");c("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var e=a.overrideKeywords;if(e){for(var d in e){if(e.hasOwnProperty(d)){f[d]=e[d]}}}return f})();return{startState:function(){return{f:A}},copyState:function(c){return{f:c.f}},token:function(c,d){var e=d.f(c,function(g){d.f=g});var f=c.current();return H.hasOwnProperty(f)?H[f]:e},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}});b.defineMIME("text/x-haskell","haskell")});